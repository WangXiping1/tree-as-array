const p={mapTree:(n,e,r={children:"children",id:"id"})=>n.flatMap((n=>[e(n),...null!=n&&n[r.children]&&(null==n?void 0:n[r.children].length)>0?p.mapTree(null==n?void 0:n[r.children],e,r):[]])),filterTree(n,e,r={children:"children",id:"id"}){const l=[];return function n(i){i.map(((i,d)=>{e(i,d)&&l.push(i),null!=i&&i[r.children]&&n(null==i?void 0:i[r.children])}))}(n),l},findTree(n,e,r={children:"children",id:"id"}){for(const l of n){if(e(l))return l;if(null!=l&&l[r.children]){const n=this.findTree(null==l?void 0:l[r.children],e,r);if(n)return n}}return null},pushTree(n,e,r,l={children:"children",id:"id"}){(function n(e,r,l,i){for(let d of e){if((null==d?void 0:d[i.id])===r)return null!=d&&d[i.children]||(d[i.children]=[]),d[i.children].push(l),!0;if(null!=d&&d[i.children]&&n(d[i.children],r,l,i))return!0}return!1})(n,e,r,l)||console.error(`Node with ID ${e} not found in the tree.`)},unshiftTree(n,e,r,l={children:"children",id:"id"}){(function n(e,r,l,i){for(let d of e){if((null==d?void 0:d[i.id])===r)return null!=d&&d[i.children]||(d[i.children]=[]),d[i.children].unshift(l),!0;if(null!=d&&d[i.children]&&n(d[i.children],r,l,i))return!0}return!1})(n,e,r,l)||console.error(`Node with ID ${e} not found in the tree.`)},popTree(n,e,r={children:"children",id:"id"}){(function n(e,r,l){for(let i of e){if((null==i?void 0:i[l.id])===r)return null!=i&&i[l.children]&&i[l.children].length>0&&i[l.children].pop(),!0;if(null!=i&&i[l.children]&&n(i[l.children],r,l))return!0}return!1})(n,e,r)||console.error(`Node with ID ${e} not found in the tree, or it has no children to pop.`)},shiftTree(n,e,r={children:"children",id:"id"}){(function n(e,r,l){for(let i of e){if((null==i?void 0:i[l.id])===r)return null!=i&&i[l.children]&&i[l.children].length>0&&i[l.children].shift(),!0;if(null!=i&&i[l.children]&&n(i[l.children],r,l))return!0}return!1})(n,e,r)||console.error(`Node with ID ${e} not found in the tree, or it has no children to pop.`)},someTree:(n,e,r={children:"children",id:"id"})=>function n(l){for(let i of l)if(e(i)||null!=i&&i[r.children]&&n(null==i?void 0:i[r.children]))return!0;return!1}(n),everyTree:(n,e,r={children:"children",id:"id"})=>function n(l){for(let i of l)if(!e(i)||null!=i&&i[r.children]&&!n(null==i?void 0:i[r.children]))return!1;return!0}(n),atTree(n,e,r,l={children:"children",id:"id"}){for(const i of n){if((null==i?void 0:i[l.id])===e){let n=r>=0?r:(null==i?void 0:i[l.children].length)+r;return null!=i&&i[l.children]&&n>=0&&n<(null==i?void 0:i[l.children].length)?null==i?void 0:i[l.children][n]:null}if(null!=i&&i[l.children]){const n=this.atTree(null==i?void 0:i[l.children],e,r,l);if(n)return n}}return null},indexOfTree:(n,e,r={children:"children",id:"id"})=>function n(e,l,i=[]){for(const d of e){const o=[...i,e.indexOf(d)];if((null==d?void 0:d[r.id])===l)return o;if(null!=d&&d[r.children]){const e=n(null==d?void 0:d[r.children],l,o);if(e)return e}}return null}(n,e),atIndexOfTree:(n,e,r={children:"children",id:"id"})=>function n(e,r,l){if(!e||0===r.length)return null;const i=e[r[0]];return i?1===r.length?i:null!=i&&i[l.children]?n(null==i?void 0:i[l.children],r.slice(1),l):null:null}(n,e,r),nodeDepthMap(n,e={children:"children",id:"id"}){const r={};function l(n,i=1){if(r[null==n?void 0:n[e.id]]=i,null!=n&&n[e.children])for(const r of null==n?void 0:n[e.children])l(r,i+1)}for(const e of n)l(e);return r},dedupTree(n,e){const r=[],l=new Set,i=n=>{for(let d of n)if("object"!=typeof d||null===d||l.has(d[e]))Array.isArray(d)&&i(d);else{l.add(d[e]);const n={...d};Object.keys(n).forEach((r=>{Array.isArray(n[r])&&(n[r]=this.dedupTree(n[r],e))})),r.push(n)}};return i(n),r}};export{p as default};