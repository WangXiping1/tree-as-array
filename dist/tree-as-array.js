const p={mapTree:(n,l,e={children:"children",id:"id"})=>n.flatMap((n=>[l(n),...null!=n&&n[e.children]&&(null==n?void 0:n[e.children].length)>0?p.mapTree(null==n?void 0:n[e.children],l,e):[]])),filterTree(n,l,e={children:"children",id:"id"}){const i=[];return function n(r){for(let d of r)l(d)&&i.push(d),null!=d&&d[e.children]&&n(null==d?void 0:d[e.children])}(n),i},findTree(n,l,e={children:"children",id:"id"}){for(const i of n){if(l(i))return i;if(null!=i&&i[e.children]){const n=p.findTree(null==i?void 0:i[e.children],l,e);if(n)return n}}return null},pushTree(n,l,e,i={children:"children",id:"id"}){(function n(l,e,i,r){return l.some((l=>(null==l?void 0:l[r.id])===e?(null!=l&&l[r.children]||(l[r.children]=[]),null==l||l[r.children].push(i),!0):!(null==l||!l[r.children])&&n(l[r.children],e,i,r)))})(n,l,e,i)||console.error(`Node with ID ${l} not found in the tree.`)},unshiftTree(n,l,e,i={children:"children",id:"id"}){(function n(l,e,i,r){return l.some((l=>(null==l?void 0:l[r.id])===e?(null!=l&&l[r.children]||(l[r.children]=[]),null==l||l[r.children].unshift(i),!0):!(null==l||!l[r.children])&&n(l[r.children],e,i,r)))})(n,l,e,i)||console.error(`Node with ID ${l} not found in the tree.`)},popTree(n,l,e={children:"children",id:"id"}){(function n(l,e,i){return l.some((l=>(null==l?void 0:l[i.id])===e?(null!=l&&l[i.children]&&(null==l?void 0:l[i.children].length)>0&&(null==l||l[i.children].pop()),!0):!(null==l||!l[i.children])&&n(l[i.children],e,i)))})(n,l,e)||console.error(`Node with ID ${l} not found in the tree, or it has no children to pop.`)},shiftTree(n,l,e={children:"children",id:"id"}){(function n(l,e,i){return l.some((l=>(null==l?void 0:l[i.id])===e?(null!=l&&l[i.children]&&(null==l?void 0:l[i.children].length)>0&&(null==l||l[i.children].shift()),!0):!(null==l||!l[i.children])&&n(l[i.children],e,i)))})(n,l,e)||console.error(`Node with ID ${l} not found in the tree, or it has no children to shift.`)},someTree:(n,l,e={children:"children",id:"id"})=>function n(i){for(let r of i)if(l(r)||null!=r&&r[e.children]&&n(null==r?void 0:r[e.children]))return!0;return!1}(n),everyTree:(n,l,e={children:"children",id:"id"})=>function n(i){for(let r of i)if(!l(r)||null!=r&&r[e.children]&&!n(null==r?void 0:r[e.children]))return!1;return!0}(n),atTree(n,l,e,i={children:"children",id:"id"}){for(const r of n){if((null==r?void 0:r[i.id])===l){let n=e>=0?e:(null==r?void 0:r[i.children].length)+e;return null!=r&&r[i.children]&&n>=0&&n<(null==r?void 0:r[i.children].length)?null==r?void 0:r[i.children][n]:null}if(null!=r&&r[i.children]){const n=this.atTree(null==r?void 0:r[i.children],l,e,i);if(n)return n}}return null},indexOfTree:(n,l,e={children:"children",id:"id"})=>function n(l,i,r=[]){for(const d of l){const o=[...r,l.indexOf(d)];if((null==d?void 0:d[e.id])===i)return o;if(null!=d&&d[e.children]){const l=n(null==d?void 0:d[e.children],i,o);if(l)return l}}return null}(n,l),atIndexOfTree:(n,l,e={children:"children",id:"id"})=>function n(l,e,i){if(!l||0===e.length)return null;const r=l[e[0]];return r?1===e.length?r:null!=r&&r[i.children]?n(null==r?void 0:r[i.children],e.slice(1),i):null:null}(n,l,e),nodeDepthMap(n,l={children:"children",id:"id"}){const e={};function i(n,r=1){if(e[null==n?void 0:n[l.id]]=r,null!=n&&n[l.children])for(const e of null==n?void 0:n[l.children])i(e,r+1)}for(const l of n)i(l);return e},dedupTree(n,l){const e=[],i=new Set,r=n=>{for(let d of n)if("object"!=typeof d||null===d||i.has(d[l]))Array.isArray(d)&&r(d);else{i.add(d[l]);const n={...d};Object.keys(n).forEach((e=>{Array.isArray(n[e])&&(n[e]=this.dedupTree(n[e],l))})),e.push(n)}};return r(n),e}};export{p as default};