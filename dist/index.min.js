export function mapTree(e,n,r="children"){const t=[];for(let i=0;i<e.length;i++){const o=e[i],l=n(o);if(t.push(l),o?.[r]&&o?.[r].length>0){const e=mapTree(o?.[r],n,r);t.push(...e)}}return t}const filterArr=[];export function filterTree(e,n){for(let r of e)r.children&&filterTree(r.children,n),n(r)&&filterArr.push(r);return filterArr}export function findTree(e,n){for(const r of e){if(n(r))return r;if(r.children){const e=findTree(r.children,n);if(e)return e}}return null}export function pushTree(e,n,r){(function e(n,r,t){return n.some((n=>n?.id===r?(n.children||(n.children=[]),n.children.push(t),!0):!!n.children&&e(n.children,r,t)))})(e,n,r)||console.error(`Node with ID ${n} not found in the tree.`)}export function unshiftTree(e,n,r){(function e(n,r,t){return n.some((n=>n?.id===r?(n.children||(n.children=[]),n.children.unshift(t),!0):!!n.children&&e(n.children,r,t)))})(e,n,r)||console.error(`Node with ID ${n} not found in the tree.`)}export function popTree(e,n){(function e(n,r){return n.some((n=>n?.id===r?(n.children&&n.children.length>0&&n.children.pop(),!0):!!n.children&&e(n.children,r)))})(e,n)||console.error(`Node with ID ${n} not found in the tree, or it has no children to pop.`)}export function shiftTree(e,n){(function e(n,r){return n.some((n=>n?.id===r?(n.children&&n.children.length>0&&n.children.shift(),!0):!!n.children&&e(n.children,r)))})(e,n)||console.error(`Node with ID ${n} not found in the tree, or it has no children to shift.`)}let isSome=!1;export function someTree(e,n){for(let r of e)r.children&&someTree(r.children,n),n(r)&&(isSome=!0);return isSome}const isEvery=[];let treeLength=0;export function everyTree(e,n){for(let r of e)treeLength++,r.children&&everyTree(r.children,n),n(r)&&isEvery.push(r);return treeLength===isEvery.length}export function atTree(e,n,r){for(const t of e){if(t?.id===n){let e=r>=0?r:t.children.length+r;return t.children&&e>=0&&e<t.children.length?t.children[e]:null}if(t.children){const e=atTree(t.children,n,r);if(e)return e}}return null}export function indexOfTree(e,n){return function e(n,r,t=[]){for(let i=0;i<n.length;i++){const o=n[i];if(t.push(i),o?.id===r)return t;if(o.children){const n=e(o.children,r,t);if(n)return n}t.pop()}return null}(e,n)}export function atIndexOfTree(e,n){return function e(n,r){if(!n||0===r.length)return null;const t=n[r[0]];return t?1===r.length?t:t.children?e(t.children,r.slice(1)):null:null}(e,n)}export function nodeDepthMap(e){const n={};function r(e,t){let i=t||1;if(n[e?.id]=i,e.children)for(const n of e.children)r(n,i+1)}for(const n of e)r(n);return n}