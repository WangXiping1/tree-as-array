export function mapTree(e,r,n="children"){const t=[];for(let i=0;i<e.length;i++){const o=e[i],c=r(o);if(t.push(c),o?.[n]&&o?.[n].length>0){const e=mapTree(o?.[n],r,n);t.push(...e)}}return t}export function filterTree(e,r){return e.filter((e=>r(e))).map((e=>({...e,children:e.children?filterTree(e.children,r):void 0})))}export function findTree(e,r){for(const n of e){if(r(n))return n;if(n.children){const e=findTree(n.children,r);if(e)return e}}return null}export function pushTree(e,r,n){(function e(r,n,t){return r.some((r=>r.id===n?(r.children||(r.children=[]),r.children.push(t),!0):!!r.children&&e(r.children,n,t)))})(e,r,n)||console.error(`Node with ID ${r} not found in the tree.`)}export function unshiftTree(e,r,n){(function e(r,n,t){return r.some((r=>r.id===n?(r.children||(r.children=[]),r.children.unshift(t),!0):!!r.children&&e(r.children,n,t)))})(e,r,n)||console.error(`Node with ID ${r} not found in the tree.`)}export function someTree(e,r){for(let t of e){function n(e){if(r(e))return!0;if(e.children)for(let r of e.children)if(n(r))return!0;return!1}if(n(t))return!0}return!1}