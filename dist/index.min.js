export function mapTree(e,r,n="children"){const t=[];for(let i=0;i<e.length;i++){const o=e[i],c=r(o);if(t.push(c),o?.[n]&&o?.[n].length>0){const e=mapTree(o?.[n],r,n);t.push(...e)}}return t}const filterArr=[];export function filterTree(e,r){for(let n of e)n.children&&filterTree(n.children,r),r(n)&&filterArr.push(n);return filterArr}export function findTree(e,r){for(const n of e){if(r(n))return n;if(n.children){const e=findTree(n.children,r);if(e)return e}}return null}export function pushTree(e,r,n){(function e(r,n,t){return r.some((r=>r.id===n?(r.children||(r.children=[]),r.children.push(t),!0):!!r.children&&e(r.children,n,t)))})(e,r,n)||console.error(`Node with ID ${r} not found in the tree.`)}export function unshiftTree(e,r,n){(function e(r,n,t){return r.some((r=>r.id===n?(r.children||(r.children=[]),r.children.unshift(t),!0):!!r.children&&e(r.children,n,t)))})(e,r,n)||console.error(`Node with ID ${r} not found in the tree.`)}let isSome=!1;export function someTree(e,r){for(let n of e)n.children&&someTree(n.children,r),r(n)&&(isSome=!0);return isSome}const isEvery=[];let treeLength=0;export function everyTree(e,r){for(let n of e)treeLength++,n.children&&everyTree(n.children,r),r(n)&&isEvery.push(n);return treeLength===isEvery.length}export function atTree(e,r,n){for(const t of e){if(t.id===r){let e=n>=0?n:t.children.length+n;return t.children&&e>=0&&e<t.children.length?t.children[e]:null}if(t.children){const e=atTree(t.children,r,n);if(e)return e}}return null}export function nodeDepthMap(e){const r={};function n(e,t){let i=t||1;if(r[e.id]=i,e.children)for(const r of e.children)n(r,i+1)}for(const r of e)n(r);return r}