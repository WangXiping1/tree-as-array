"use strict";const p={mapTree(s,l,u={children:"children",id:"id"}){return s.flatMap(i=>{const r=l(i),c=i!=null&&i[u.children]&&(i==null?void 0:i[u.children].length)>0?p.mapTree(i==null?void 0:i[u.children],l,u):[];return[r,...c]})},filterTree(s,l,u={children:"children",id:"id"}){const i=[];function r(c){for(let h of c)l(h)&&i.push(h),h!=null&&h[u.children]&&r(h==null?void 0:h[u.children])}return r(s),i},findTree(s,l,u={children:"children",id:"id"}){for(const i of s){if(l(i))return i;if(i!=null&&i[u.children]){const r=p.findTree(i==null?void 0:i[u.children],l,u);if(r)return r}}return null},pushTree(s,l,u,i={children:"children",id:"id"}){function r(c,h,t,f){return c.some(n=>(n==null?void 0:n[f.id])===h?(n!=null&&n[f.children]||(n[f.children]=[]),n==null||n[f.children].push(t),!0):n!=null&&n[f.children]?r(n[f.children],h,t,f):!1)}r(s,l,u,i)||console.error(`Node with ID ${l} not found in the tree.`)},unshiftTree(s,l,u,i={children:"children",id:"id"}){function r(c,h,t,f){return c.some(n=>(n==null?void 0:n[f.id])===h?(n!=null&&n[f.children]||(n[f.children]=[]),n==null||n[f.children].unshift(t),!0):n!=null&&n[f.children]?r(n[f.children],h,t,f):!1)}r(s,l,u,i)||console.error(`Node with ID ${l} not found in the tree.`)},popTree(s,l,u={children:"children",id:"id"}){function i(r,c,h){return r.some(t=>(t==null?void 0:t[h.id])===c?(t!=null&&t[h.children]&&(t==null?void 0:t[h.children].length)>0&&(t==null||t[h.children].pop()),!0):t!=null&&t[h.children]?i(t[h.children],c,h):!1)}i(s,l,u)||console.error(`Node with ID ${l} not found in the tree, or it has no children to pop.`)},shiftTree(s,l,u={children:"children",id:"id"}){function i(r,c,h){return r.some(t=>(t==null?void 0:t[h.id])===c?(t!=null&&t[h.children]&&(t==null?void 0:t[h.children].length)>0&&(t==null||t[h.children].shift()),!0):t!=null&&t[h.children]?i(t[h.children],c,h):!1)}i(s,l,u)||console.error(`Node with ID ${l} not found in the tree, or it has no children to shift.`)},someTree(s,l,u={children:"children",id:"id"}){function i(r){for(let c of r)if(l(c)||c!=null&&c[u.children]&&i(c==null?void 0:c[u.children]))return!0;return!1}return i(s)},everyTree(s,l,u={children:"children",id:"id"}){function i(r){for(let c of r)if(!l(c)||c!=null&&c[u.children]&&!i(c==null?void 0:c[u.children]))return!1;return!0}return i(s)},atTree(s,l,u,i={children:"children",id:"id"}){for(const r of s){if((r==null?void 0:r[i.id])===l){let c=u>=0?u:(r==null?void 0:r[i.children].length)+u;return r!=null&&r[i.children]&&c>=0&&c<(r==null?void 0:r[i.children].length)?r==null?void 0:r[i.children][c]:null}if(r!=null&&r[i.children]){const c=this.atTree(r==null?void 0:r[i.children],l,u,i);if(c)return c}}return null},indexOfTree(s,l,u={children:"children",id:"id"}){function i(r,c,h=[]){for(const t of r){const f=[...h,r.indexOf(t)];if((t==null?void 0:t[u.id])===c)return f;if(t!=null&&t[u.children]){const n=i(t==null?void 0:t[u.children],c,f);if(n)return n}}return null}return i(s,l)},atIndexOfTree(s,l,u={children:"children",id:"id"}){function i(r,c,h){if(!r||c.length===0)return null;const t=c[0],f=r[t];return f?c.length===1?f:f!=null&&f[h.children]?i(f==null?void 0:f[h.children],c.slice(1),h):null:null}return i(s,l,u)},nodeDepthMap(s,l={children:"children",id:"id"}){const u={};function i(r,c=1){if(u[r==null?void 0:r[l.id]]=c,r!=null&&r[l.children])for(const h of r==null?void 0:r[l.children])i(h,c+1)}for(const r of s)i(r);return u},dedupTree(s,l){const u=[],i=new Set,r=c=>{for(let h of c)if(typeof h=="object"&&h!==null&&!i.has(h[l])){i.add(h[l]);const t={...h};Object.keys(t).forEach(f=>{Array.isArray(t[f])&&(t[f]=this.dedupTree(t[f],l))}),u.push(t)}else Array.isArray(h)&&r(h)};return r(s),u}};module.exports=p;
